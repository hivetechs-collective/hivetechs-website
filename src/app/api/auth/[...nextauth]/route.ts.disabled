import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import { NextAuthOptions } from "next-auth";

// Simplified configuration that doesn't require external dependencies
const authOptions: NextAuthOptions = {
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" }
      },
      async authorize(credentials) {
        // Simple demo authentication
        if (!credentials?.email || !credentials?.password) {
          return null;
        }

        // Demo user - in production, this would check against a database
        if (credentials.email === "demo@hivetechs.io" && credentials.password === "password") {
          return {
            id: "1",
            name: "Demo User",
            email: "demo@hivetechs.io",
          };
        }
        return null;
      }
    }),
    // Google provider removed until environment variables are set up
  ],
  session: {
    strategy: "jwt",
    maxAge: 30 * 24 * 60 * 60, // 30 days
  },
  secret: process.env.NEXTAUTH_SECRET || "a-temporary-secret-for-development-only",
  // Simplified pages configuration
  pages: {
    signIn: "/", // Redirect to home page for now
    error: "/",
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
      }
      return token;
    },
    async session({ session, token }) {
      if (session.user) {
        (session.user as any).id = token.id;
      }
      return session;
    },
  },
};

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };
